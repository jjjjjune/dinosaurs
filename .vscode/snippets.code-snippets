{
	// Place your two-moons workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"GetService": {
		"prefix": "service",
		"body": [
			"local ${1|AssetService,BadgeService,ChangeHistoryService,Chat,CollectionService,ContentProvider,ContextActionService,CoreGui,DataStoreService,Debris,GamePassService,GroupService,GuiService,HapticService,HttpService,InsertService,JointsService,KeyboardService,KeyframeSequenceProvider,Lighting,LogService,MarketplaceService,MouseService,NetworkClient,NetworkServer,PathfindingService,PhysicsService,Players,PointsService,ReplicatedFirst,ReplicatedStorage,RunService,ScriptContext,Selection,ServerScriptService,ServerStorage,SoundService,StarterGui,StarterPack,StarterPlayer,Stats,Teams,TeleportService,TestService,TextService,TweenService,UserInputService,VRService,Workspace|} = game:GetService(\"$1\")$0"
		],
		"description": "GetService"
	},
	"Create a Rodux action": {
        "prefix": "newAction",
        "body": [
            "local import = require(game.ReplicatedStorage.Shared.Import)",
            "",
            "local Action = import \"Action\"",
            "local t = import \"t\"",
            "",
			"local check = t.tuple(${2})",
			"",
            "return Action(script.Name, function(${1})",
			"\tassert(check(${1}))",
			"",
			"\treturn {",
			"\t\t${3}",
            "\t}",
            "end)",
        ],
	},
	"Require module importer": {
		"prefix": "requireImport",
		"body": "local import = require(game.ReplicatedStorage.Shared.Import)"
	},
	"Import": {
		"prefix": "import",
		"body": "local ${1} = import \"${2}\""
	},
	"Import export": {
		"prefix": "importExport",
		"body": "local ${1} = import(\"${2}\", { \"$3\" })"
	},
	"System": {
		"prefix": "system",
		"body": [
			"local ${1} = {}",
			"",
			"function ${1}:start()",
			"\t${0}",
			"end",
			"",
			"return ${1}"
		]
	},
	"New function": {
		"prefix": "func",
		"body": [
			"local ${1}Check = t.tuple(${3})",
			"local function ${1}(${2})",
			"\tassert(${1}Check(${2}))",
			"\t${4}",
			"end"
		],
		"description": "Creates a new function using t to typecheck arguments."
	},
	"New module function": {
		"prefix": "mfunc",
		"body": [
			"local ${2}Check = t.tuple(${4})",
			"function ${1}.${2}(${3})",
			"\tassert(${2}Check(${3}))",
			"\t${5}",
			"end"
		],
		"description": "Creates a new function as part of a module"
	},
	"Functional component": {
		"prefix": "component",
		"body": [
			"local Roact = import \"Roact\"",
			"local t = import \"t\"",
			"",
			"local IProps = t.interface({",
			"\t$2",
			"})",
			"",
			"local function $1(props)",
			"\tassert(IProps(props))",
			"",
			"\treturn Roact.createElement($0)",
			"end",
			"",
			"return $1"
		]
	}
}
